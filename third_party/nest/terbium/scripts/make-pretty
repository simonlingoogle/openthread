#!/bin/bash
#
#
# Copyright (c) 2020 Google LLC.
# All rights reserved.
#
# This document is the property of Google LLC, Inc. It is
# considered proprietary and confidential information.
#
# This document may not be reproduced or transmitted in any form,
# in whole or in part, without the express written permission of
# Google LLC.

#
# The script to check or format source code of Terbium.
#
# Format python and c/c++:
#
#     script/make-pretty
#
# Format python only:
#
#     script/make-pretty python
#
# Format c/c++ only:
#
#     script/make-pretty clang
#
# Check only:
#
#     script/make-pretty check clang
#     script/make-pretty check python
#

set -euo pipefail

readonly OT_CLANG_DIRS=(app src)
readonly OT_PYTHON_DIRS=(scripts)
readonly OT_BUILD_JOBS=$(getconf _NPROCESSORS_ONLN)
readonly OT_CLANG_SOURCES=('*.c' '*.cc' '*.cpp' '*.h' '*.hpp')

do_clang_format()
{
    echo -e '====================='
    echo -e '     format c/c++'
    echo -e '====================='

    git ls-files "${OT_CLANG_SOURCES[@]}" | grep -E "^($(echo "${OT_CLANG_DIRS[@]}" | tr ' ' '|'))" \
        | xargs -n3 -P"${OT_BUILD_JOBS}" ../../../script/clang-format -style=file -i -verbose
}

do_clang_check()
{
    echo -e '====================='
    echo -e '     check c/c++'
    echo -e '====================='

    git ls-files "${OT_CLANG_SOURCES[@]}" | grep -E "^($(echo "${OT_CLANG_DIRS[@]}" | tr ' ' '|'))" \
        | xargs -n3 -P"${OT_BUILD_JOBS}" ../../../script/clang-format-check
}

do_python_format()
{
    echo -e '======================'
    echo -e '     format python'
    echo -e '======================'

    git ls-files '*.py' | grep -E "^($(echo "${OT_PYTHON_DIRS[@]}" | tr ' ' '|'))" \
        | xargs -n10 -P"${OT_BUILD_JOBS}" python3 -m yapf --verbose --style google -ipr
}

do_python_check()
{
    echo -e '====================='
    echo -e '     check python'
    echo -e '====================='

    git ls-files '*.py' | grep -E "^($(echo "${OT_PYTHON_DIRS[@]}" | tr ' ' '|'))" \
        | xargs -n10 -P"${OT_BUILD_JOBS}" python3 -m yapf --verbose --style google -dpr
}

do_check()
{
    if [ $# == 0 ]; then
        do_python_check
        do_clang_check
    elif [ "$1" == 'clang' ]; then
        do_clang_check
    elif [ "$1" == 'python' ]; then
        do_python_check
    else
        >&2 echo "Unsupported check: $1. Supported: clang, python"
        # 128 for Invalid arguments
        exit 128
    fi
}

main()
{
    if [ $# == 0 ]; then
        do_clang_format
        do_python_format
    elif [ "$1" == 'python' ]; then
        do_python_format
    elif [ "$1" == 'clang' ]; then
        do_clang_format
    elif [ "$1" == 'check' ]; then
        shift
        do_check "$@"
    else
        >&2 echo "Unsupported action: $1. Supported: clang, python"
        # 128 for Invalid arguments
        exit 128
    fi

}

main "$@"
