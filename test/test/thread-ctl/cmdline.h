/** @file cmdline.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.22.6
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt by Lorenzo Bettini */

#ifndef CMDLINE_H
#define CMDLINE_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_PACKAGE
/** @brief the program name (used for printing errors) */
#define CMDLINE_PARSER_PACKAGE "thread-ctl"
#endif

#ifndef CMDLINE_PARSER_PACKAGE_NAME
/** @brief the complete program name (used for help and version) */
#define CMDLINE_PARSER_PACKAGE_NAME "thread-ctl"
#endif

#ifndef CMDLINE_PARSER_VERSION
/** @brief the program version */
#define CMDLINE_PARSER_VERSION "0.1"
#endif

enum enum_state { state__NULL = -1, state_arg_detached = 0, state_arg_child, state_arg_router, state_arg_leader, state_arg_unspec };
enum enum_status { status__NULL = -1, status_arg_up = 0, status_arg_down, status_arg_unspec };
enum enum_whitelist_status { whitelist_status__NULL = -1, whitelist_status_arg_enable = 0, whitelist_status_arg_disable, whitelist_status_arg_unspec };

/** @brief Where the command line options are stored */
struct gengetopt_args_info
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  char * interface_arg;	/**< @brief Network Interface.  */
  char * interface_orig;	/**< @brief Network Interface original value given at command line.  */
  const char *interface_help; /**< @brief Network Interface help description.  */
  char * key_arg;	/**< @brief Get/Set the Thread Master Key.  */
  char * key_orig;	/**< @brief Get/Set the Thread Master Key original value given at command line.  */
  const char *key_help; /**< @brief Get/Set the Thread Master Key help description.  */
  int key_sequence_arg;	/**< @brief Get/Set the Thread Key Sequence.  */
  char * key_sequence_orig;	/**< @brief Get/Set the Thread Key Sequence original value given at command line.  */
  const char *key_sequence_help; /**< @brief Get/Set the Thread Key Sequence help description.  */
  char * mode_arg;	/**< @brief Get/Set the Thread device mode
  r: rx-on-when-idle
  s: secure data request
  d: full function device
  n: full network data.  */
  char * mode_orig;	/**< @brief Get/Set the Thread device mode
  r: rx-on-when-idle
  s: secure data request
  d: full function device
  n: full network data original value given at command line.  */
  const char *mode_help; /**< @brief Get/Set the Thread device mode
  r: rx-on-when-idle
  s: secure data request
  d: full function device
  n: full network data help description.  */
  char * prefix_arg;	/**< @brief Get/Set the Thread Mesh Local Prefix.  */
  char * prefix_orig;	/**< @brief Get/Set the Thread Mesh Local Prefix original value given at command line.  */
  const char *prefix_help; /**< @brief Get/Set the Thread Mesh Local Prefix help description.  */
  enum enum_state state_arg;	/**< @brief Get/Set the Thread state (default='unspec').  */
  char * state_orig;	/**< @brief Get/Set the Thread state original value given at command line.  */
  const char *state_help; /**< @brief Get/Set the Thread state help description.  */
  enum enum_status status_arg;	/**< @brief Get/Set the Thread status (default='unspec').  */
  char * status_orig;	/**< @brief Get/Set the Thread status original value given at command line.  */
  const char *status_help; /**< @brief Get/Set the Thread status help description.  */
  int timeout_arg;	/**< @brief Get/Set the Thread timeout.  */
  char * timeout_orig;	/**< @brief Get/Set the Thread timeout original value given at command line.  */
  const char *timeout_help; /**< @brief Get/Set the Thread timeout help description.  */
  int channel_arg;	/**< @brief Get/Set the IEEE 802.15.4 Channel.  */
  char * channel_orig;	/**< @brief Get/Set the IEEE 802.15.4 Channel original value given at command line.  */
  const char *channel_help; /**< @brief Get/Set the IEEE 802.15.4 Channel help description.  */
  int panid_arg;	/**< @brief Get/Set the IEEE 802.15.4 PAN ID.  */
  char * panid_orig;	/**< @brief Get/Set the IEEE 802.15.4 PAN ID original value given at command line.  */
  const char *panid_help; /**< @brief Get/Set the IEEE 802.15.4 PAN ID help description.  */
  char * xpanid_arg;	/**< @brief Get/Set the IEEE 802.15.4 Extended PAN ID.  */
  char * xpanid_orig;	/**< @brief Get/Set the IEEE 802.15.4 Extended PAN ID original value given at command line.  */
  const char *xpanid_help; /**< @brief Get/Set the IEEE 802.15.4 Extended PAN ID help description.  */
  char * netname_arg;	/**< @brief Get/Set the IEEE 802.15.4 Network Name.  */
  char * netname_orig;	/**< @brief Get/Set the IEEE 802.15.4 Network Name original value given at command line.  */
  const char *netname_help; /**< @brief Get/Set the IEEE 802.15.4 Network Name help description.  */
  int shortaddr_flag;	/**< @brief Get the IEEE 802.15.4 Short Address (default=off).  */
  const char *shortaddr_help; /**< @brief Get the IEEE 802.15.4 Short Address help description.  */
  int extaddr_flag;	/**< @brief Get the IEEE 802.15.4 Extended Address (default=off).  */
  const char *extaddr_help; /**< @brief Get the IEEE 802.15.4 Extended Address help description.  */
  enum enum_whitelist_status whitelist_status_arg;	/**< @brief Get/Set the IEEE 802.15.4 whitelist status (default='unspec').  */
  char * whitelist_status_orig;	/**< @brief Get/Set the IEEE 802.15.4 whitelist status original value given at command line.  */
  const char *whitelist_status_help; /**< @brief Get/Set the IEEE 802.15.4 whitelist status help description.  */
  char * whitelist_add_arg;	/**< @brief Add an IEEE 802.15.4 Extended Address to the whitelist.  */
  char * whitelist_add_orig;	/**< @brief Add an IEEE 802.15.4 Extended Address to the whitelist original value given at command line.  */
  const char *whitelist_add_help; /**< @brief Add an IEEE 802.15.4 Extended Address to the whitelist help description.  */
  char * whitelist_delete_arg;	/**< @brief Delete an IEEE 802.15.4 Extended Address from the whitelist.  */
  char * whitelist_delete_orig;	/**< @brief Delete an IEEE 802.15.4 Extended Address from the whitelist original value given at command line.  */
  const char *whitelist_delete_help; /**< @brief Delete an IEEE 802.15.4 Extended Address from the whitelist help description.  */
  int whitelist_show_flag;	/**< @brief Show the IEEE 802.15.4 Extended Addresses in the whitelist (default=off).  */
  const char *whitelist_show_help; /**< @brief Show the IEEE 802.15.4 Extended Addresses in the whitelist help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int interface_given ;	/**< @brief Whether interface was given.  */
  unsigned int key_given ;	/**< @brief Whether key was given.  */
  unsigned int key_sequence_given ;	/**< @brief Whether key-sequence was given.  */
  unsigned int mode_given ;	/**< @brief Whether mode was given.  */
  unsigned int prefix_given ;	/**< @brief Whether prefix was given.  */
  unsigned int state_given ;	/**< @brief Whether state was given.  */
  unsigned int status_given ;	/**< @brief Whether status was given.  */
  unsigned int timeout_given ;	/**< @brief Whether timeout was given.  */
  unsigned int channel_given ;	/**< @brief Whether channel was given.  */
  unsigned int panid_given ;	/**< @brief Whether panid was given.  */
  unsigned int xpanid_given ;	/**< @brief Whether xpanid was given.  */
  unsigned int netname_given ;	/**< @brief Whether netname was given.  */
  unsigned int shortaddr_given ;	/**< @brief Whether shortaddr was given.  */
  unsigned int extaddr_given ;	/**< @brief Whether extaddr was given.  */
  unsigned int whitelist_status_given ;	/**< @brief Whether whitelist-status was given.  */
  unsigned int whitelist_add_given ;	/**< @brief Whether whitelist-add was given.  */
  unsigned int whitelist_delete_given ;	/**< @brief Whether whitelist-delete was given.  */
  unsigned int whitelist_show_given ;	/**< @brief Whether whitelist-show was given.  */

} ;

/** @brief The additional parameters to pass to parser functions */
struct cmdline_parser_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure gengetopt_args_info (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure gengetopt_args_info (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *gengetopt_args_info_purpose;
/** @brief the usage string of the program */
extern const char *gengetopt_args_info_usage;
/** @brief the description string of the program */
extern const char *gengetopt_args_info_description;
/** @brief all the lines making the help output */
extern const char *gengetopt_args_info_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser (int argc, char **argv,
  struct gengetopt_args_info *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_ext() instead
 */
int cmdline_parser2 (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_ext (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  struct cmdline_parser_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_dump(FILE *outfile,
  struct gengetopt_args_info *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_file_save(const char *filename,
  struct gengetopt_args_info *args_info);

/**
 * Print the help
 */
void cmdline_parser_print_help(void);
/**
 * Print the version
 */
void cmdline_parser_print_version(void);

/**
 * Initializes all the fields a cmdline_parser_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void cmdline_parser_params_init(struct cmdline_parser_params *params);

/**
 * Allocates dynamically a cmdline_parser_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized cmdline_parser_params structure
 */
struct cmdline_parser_params *cmdline_parser_params_create(void);

/**
 * Initializes the passed gengetopt_args_info structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void cmdline_parser_init (struct gengetopt_args_info *args_info);
/**
 * Deallocates the string fields of the gengetopt_args_info structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void cmdline_parser_free (struct gengetopt_args_info *args_info);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int cmdline_parser_required (struct gengetopt_args_info *args_info,
  const char *prog_name);

extern const char *cmdline_parser_state_values[];  /**< @brief Possible values for state. */
extern const char *cmdline_parser_status_values[];  /**< @brief Possible values for status. */
extern const char *cmdline_parser_whitelist_status_values[];  /**< @brief Possible values for whitelist-status. */


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* CMDLINE_H */
